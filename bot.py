import asyncio
import logging
import random
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7956575657:AAE-wEUTf6twUrFTgMxLjshmSzrriWf9Ubc"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = 475354897  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ö–ª–∞—Å—Å –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
class ContestCallback(CallbackData, prefix="contest"):
    action: str
    contest_id: str

# –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
class Contest:
    def __init__(self, contest_id, title, description, duration_minutes):
        self.id = contest_id
        self.title = title
        self.description = description
        self.end_time = datetime.now() + timedelta(minutes=duration_minutes)
        self.participants = []  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (user_id, user_name)
        self.is_active = True
    
    def add_participant(self, user_id, user_name):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
        for participant_id, _ in self.participants:
            if participant_id == user_id:
                return False
        
        self.participants.append((user_id, user_name))
        return True
    
    def is_expired(self):
        return datetime.now() > self.end_time
    
    def remaining_minutes(self):
        delta = self.end_time - datetime.now()
        return max(0, int(delta.total_seconds() // 60))

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–æ–≤
class ContestManager:
    def __init__(self):
        self.contests = {}  # {contest_id: Contest}
        self.next_id = 1
    
    def create_contest(self, title, description, duration_minutes):
        contest_id = f"contest_{self.next_id}"
        self.next_id += 1
        
        contest = Contest(contest_id, title, description, duration_minutes)
        self.contests[contest_id] = contest
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å: {contest_id} - {title}")
        return contest
    
    def get_contest(self, contest_id):
        return self.contests.get(contest_id)
    
    def get_active_contests(self):
        return {cid: contest for cid, contest in self.contests.items() 
                if contest.is_active and not contest.is_expired()}
    
    def end_contest(self, contest_id):
        if contest_id in self.contests:
            self.contests[contest_id].is_active = False
            logger.info(f"–ö–æ–Ω–∫—É—Ä—Å {contest_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
        return False

# –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–æ–≤
contest_manager = ContestManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
class ContestStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_duration = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤.\n"
        "–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞.\n"
        "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("create"))
async def cmd_create(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    await message.answer("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:")
    await state.set_state(ContestStates.waiting_for_title)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
@router.message(ContestStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞:")
    await state.set_state(ContestStates.waiting_for_description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
@router.message(ContestStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):"
    )
    await state.set_state(ContestStates.waiting_for_duration)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—É—Ä—Å–∞
@router.message(ContestStates.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    try:
        duration = int(message.text)
        if duration <= 0:
            raise ValueError("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        data = await state.get_data()
        title = data["title"]
        description = data["description"]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å
        contest = contest_manager.create_contest(title, description, duration)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —É—á–∞—Å—Ç–∏—è
        builder = InlineKeyboardBuilder()
        callback_data = ContestCallback(action="join", contest_id=contest.id).pack()
        builder.button(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=callback_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ
        await message.answer(
            f"üéâ –ù–æ–≤—ã–π –∫–æ–Ω–∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìå <b>{title}</b>\n\n"
            f"{description}\n\n"
            f"‚è± –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ {duration} –º–∏–Ω—É—Ç.",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
        asyncio.create_task(end_contest_timer(contest.id, duration))
        
        await state.clear()
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")

# –§—É–Ω–∫—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞
async def end_contest_timer(contest_id, duration):
    await asyncio.sleep(duration * 60)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
    
    logger.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ {contest_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    contest = contest_manager.get_contest(contest_id)
    if contest and contest.is_active:
        participants = contest.participants
        
        if participants:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner_id, winner_name = random.choice(participants)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
            await bot.send_message(
                ADMIN_ID,
                f"üéâ –ö–æ–Ω–∫—É—Ä—Å '{contest.title}' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name} (ID: {winner_id})\n"
                f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            try:
                await bot.send_message(
                    winner_id,
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ '{contest.title}'!"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
        else:
            await bot.send_message(
                ADMIN_ID,
                f"‚ö†Ô∏è –ö–æ–Ω–∫—É—Ä—Å '{contest.title}' –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ."
            )
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω–∫—É—Ä—Å –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        contest_manager.end_contest(contest_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
@router.callback_query(ContestCallback.filter(F.action == "join"))
async def process_join(callback: CallbackQuery, callback_data: ContestCallback):
    contest_id = callback_data.contest_id
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ: {contest_id}")
    
    contest = contest_manager.get_contest(contest_id)
    if not contest or not contest.is_active or contest.is_expired():
        await callback.answer("–≠—Ç–æ—Ç –∫–æ–Ω–∫—É—Ä—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return
    
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if contest.add_participant(user_id, user_name):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_name}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω–∫—É—Ä—Å {contest_id}")
        await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!", show_alert=True)
    else:
        await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –∫–æ–Ω–∫—É—Ä—Å–µ!", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
@router.message(Command("list"))
async def cmd_list(message: Message):
    active_contests = contest_manager.get_active_contests()
    
    if not active_contests:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤.")
        return
    
    text = "üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤:\n\n"
    
    for contest_id, contest in active_contests.items():
        text += (
            f"üìå <b>{contest.title}</b>\n"
            f"{contest.description}\n"
            f"‚è± –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {contest.remaining_minutes()} –º–∏–Ω.\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(contest.participants)}\n\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
    builder = InlineKeyboardBuilder()
    for contest_id, contest in active_contests.items():
        callback_data = ContestCallback(action="join", contest_id=contest.id).pack()
        builder.button(
            text=f"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ '{contest.title}'", 
            callback_data=callback_data
        )
    builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
    
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.message(Command("debug"))
async def cmd_debug(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    active_contests = contest_manager.get_active_contests()
    all_contests = contest_manager.contests
    
    debug_info = (
        f"–í—Å–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–æ–≤: {len(all_contests)}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤: {len(active_contests)}\n\n"
    )
    
    for contest_id, contest in all_contests.items():
        status = "–∞–∫—Ç–∏–≤–µ–Ω" if contest.is_active and not contest.is_expired() else "–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
        debug_info += (
            f"–ö–æ–Ω–∫—É—Ä—Å {contest_id}:\n"
            f"- –ù–∞–∑–≤–∞–Ω–∏–µ: {contest.title}\n"
            f"- –°—Ç–∞—Ç—É—Å: {status}\n"
            f"- –£—á–∞—Å—Ç–Ω–∏–∫–∏: {len(contest.participants)}\n"
            f"- –û—Å—Ç–∞–ª–æ—Å—å: {contest.remaining_minutes()} –º–∏–Ω.\n\n"
        )
    
    await message.answer(debug_info)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
